buildscript {
    ext {
        springBootVersion = '2.0.0.RELEASE'
        sonarQubePluginVersion = '2.6.2'
        coverallsPluginVersion = '2.8.2'
    }
    repositories {
        mavenCentral()
        maven { url "https://repo.spring.io/snapshot" }
        maven { url "https://repo.spring.io/milestone" }
    }
    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
        classpath "org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:${sonarQubePluginVersion}"
        classpath "org.kt3k.gradle.plugin:coveralls-gradle-plugin:${coverallsPluginVersion}"
    }
}

apply plugin: 'java'
apply plugin: 'groovy'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'jacoco'
apply plugin: 'checkstyle'
apply plugin: 'findbugs'
apply plugin: 'pmd'
apply plugin: 'org.sonarqube'
apply plugin: 'com.github.kt3k.coveralls'

group = 'com.lapots.breed.judge'
version = '0.0.1'
sourceCompatibility = 1.8

repositories {
    mavenCentral()
    jcenter()
    maven { url "https://repo.spring.io/snapshot" }
    maven { url "https://repo.spring.io/milestone" }
    maven {
        url "s3://repo.mvn.dev/release"
        credentials(AwsCredentials) {
            accessKey = project.hasProperty('aws_access_key_id') ?
                    aws_access_key_id : System.getenv('aws_access_key_id')
            secretKey = project.hasProperty('aws_secret_access_key') ?
                    aws_secret_access_key : System.getenv('aws_secret_access_key')
        }
    }
}

dependencies {
    // spring boot
    compile('org.springframework.boot:spring-boot-starter')
    compile('org.springframework.boot:spring-boot-starter-web')
    compile('org.springframework.boot:spring-boot-starter-data-jpa')

    compile('com.google.code.findbugs:jsr305:3.0.2') // weird

    compile('org.postgresql:postgresql')

    compile('com.deliveredtechnologies:rulebook-core:0.9.1')

    compile('org.codehaus.groovy:groovy-all')

    compile('net.bytebuddy:byte-buddy:1.8.0')

    compile('com.google.guava:guava:24.1-jre')

    compile('com.lapots.breed.rule:xml-rule-parser:0.5.4')

    compileOnly('org.projectlombok:lombok')

    // spock dependencies
    testCompile('org.spockframework:spock-core:1.1-groovy-2.4')
    testCompile('org.spockframework:spock-spring:1.1-groovy-2.4')

    testCompile('org.springframework.boot:spring-boot-starter-test')

    testCompile('com.h2database:h2')

    // domain testing
    testCompile('com.openpojo:openpojo:0.8.9')
    testCompile('nl.jqno.equalsverifier:equalsverifier:2.4.3')
}

checkstyle {
    configFile = file('sun_checks.xml')
}

test {
    finalizedBy jacocoTestReport
}

tasks.withType(FindBugs) {
    reports {
        xml.enabled = false
        html.enabled = true
    }
}

findbugs {
    sourceSets = [sourceSets.main]
    excludeFilter = file('excludeFilter.xml')
}

tasks.withType(Pmd) {
    reports {
        html.enabled = true
    }
}

jacocoTestReport {
    reports {
        xml.enabled = true
    }
}

task zipSources(type: Zip, dependsOn: clean) {
    from project.rootDir
    includes = ['*', '*/**/*']
    excludes = ['*/test', 'latest.zip', '.travis.yml', '.gradle', '.git', '.idea', '.iml']
    archiveName 'latest.zip'
    destinationDir project.rootDir
}